
<appendix xml:id="app-python-reference"
	  xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>
    Python Reference
  </title>

  <introduction>
  <p>
    As we have introduced a number of Python commands throughout the
    text, it may be helpful to have the most important ones summarized
    in a single place.  That is the aim of this appendix.
  </p>

  <p>
	There are many other sources of information about Python and its 
	various modules. NumPy's 
	<url href="https://numpy.org/doc/stable/user/absolute_beginners.html"
			visual="absolute basics for beginners" /> 
		 is a good place to start
		 for more information about numpy in particular.
  </p>


  </introduction>
	<subsection>
		<title> Accessing Python </title>
		<p> In addition to the SageMath cellls included throughout the book, there are a number of
			ways to access Python. Here are just a few. <ol marker="a.">
				<li>
					<p> There is a freely available Sage cell at <url
							href="https://sagecell.sagemath.org/"
							visual="sagecell.sagemath.org" />. </p>
				</li>
				<li>
					<p> You can save your Sage work by creating an account at <url
							href="https://cocalc.com"
							visual="cocalc.com" /> and working in a Sage worksheet. </p>
				</li>
				<li>
					<p>
						For createing documents that include Python code, jupter notebooks, or
			quarto documents work well.
					</p>
				</li>
				<li>
					<p>
						VS Code can be configured to not only edit, but also execute Python code
						(and jupyter notebooks and quarto documents)
					</p>
				</li>
			</ol>
		</p>

	</subsection>

	<subsection>
		<title>Packages and libraries for data science</title>
		<p> Python packages can be loaded using the <c>import</c> command. <idx>
				<h>
					<c>import</c>
				</h>
			</idx> We can load entire packages
			or load submodules or even individual objects. See below for some examples. </p>
		<p> There are several add-on pacakges that are useful for linear algebra. The ones used here
			are part of the SciPy "ecosystem of open-source software for mathematics, science, and
			engineering." Core packages in this suite include <ul>
				<li>
					<title><a href="https://numpy.org/devdocs/index.html">NumPy</a> 
					(<c>import numpy as np</c>)</title>
					<idx>
						<h>
							<c>numpy</c>
						</h>
					</idx>
					<p>
						<blockquote>
							NumPy is the fundamental package for scientific
							computing in Python. It is a Python library that
							provides a multidimensional array object, various
							derived objects (such as masked arrays and matrices),
							and an assortment of routines for fast operations on
							arrays, including mathematical, logical, shape
							manipulation, sorting, selecting, I/O, discrete Fourier
							transforms, basic linear algebra, basic statistical
							operations, random simulation and much more.
						</blockquote>
					</p>


					<p>Note: NumPy includes both the 2-dimensional arrays (<c>np.array()</c>) and
			matrices (<c>np.matrix()</c>). The <c>numpy.matrix</c> class makes certain things a bit
			more convenient, but we will follow SciPy advice: <blockquote> Despite its convenience,
			the use of the <c>numpy.matrix</c> is discouraged, since it adds nothing that cannot be
			accomplished with 2-D numpy.ndarray objects, and may lead to a confusion of which class
			is being used. </blockquote>
					</p>
				</li>
				<li>
					<title><a href="https://docs.scipy.org/doc/scipy/tutorial/linalg.html">SciPy
			Linear Algebra"</a> (<c>from scipy import linalg</c>)</title>
					<idx>
						<h>
							<c>scipy.linalg</c>
						</h>
					</idx>
					<idx>
						<h>
							<c>linalg</c>
						</h>
						<see>
							<c>scipy.linalg</c>
						</see>
					</idx>
					<idx><h>SciPy</h></idx>


					<p> SciPy is a large library with many packages and submodules. We will
			primarily use <c>scipy.linalg</c>, which contains many linear algebra functions. </p>

					<p> Note that <c>np.linalg</c> also exists. Here's what SciPy has to say about
			that: <blockquote>
							<p>
								"scipy.linalg contains all the functions in
								numpy.linalg plus some other more advanced ones not
								contained in numpy.linalg.
								Another advantage of using scipy.linalg over
								numpy.linalg is that it is always compiled with
								BLAS/LAPACK support, while for numpy this is optional.
								Therefore, the scipy version might be faster depending
								on how numpy was installed.
							</p>
							<p>
								Therefore, unless you donâ€™t want to add scipy as a
								dependency to your numpy program, use scipy.linalg
								instead of numpy.linalg."
							</p>
						</blockquote>
					</p>
				</li>
				<li>
					<title> Matplotlib (<c>import matplotlib.pyplot as plt</c>) </title>
					<idx>
						<h>
							<c>matplotlib.pyplot</c>
						</h>
					</idx>
					<p>
						<blockquote>
							Matplotlib is a comprehensive library for creating
							static, animated, and interactive visualizations in
							Python. Matplotlib makes easy things easy and hard
							things possible.
						</blockquote>

					</p>
				</li>
				<li>
					<title>
						<a href="https://www.sympy.org/en/index.html">SymPy</a> 
						(<c>import sympy</c>) </title>
					<idx>
						<h>
							<c>sympy</c>
						</h>
					</idx>

					<p>
						<blockquote>
							SymPy is a Python library for symbolic mathematics. It
							aims to become a full-featured computer algebra system
							(CAS) while keeping the code as simple as possible in
							order to be comprehensible and easily extensible. SymPy
							is written entirely in Python.
						</blockquote>
					</p>
				</li>
				<li>
					<title>
						<a href="https://pandas.pydata.org/">pandas</a> 
						(<c>import pandas as pd </c>)
					</title>
					<idx>
						<h>
							<c>pandas</c>
						</h>
					</idx>

					<p>
						<blockquote>
							pandas is a fast, powerful, flexible and easy to use
							open source data analysis and manipulation tool, built
							on top of the Python programming language.
						</blockquote>
					</p>

					<p> The primary feature of pandas that we will use is its support for <term>data
			frames</term>. In a data frame, each row represents and observational unit and each
			column represents a variable. Different variables may be of different types and need not
			be numeric. pandas allows us to read data frames in from files of various formats (e.g.,
			CSV files) and to perform data wrangling on the result. </p>
				</li>
			</ul>
		</p>
		<p>
			<a href="https://seaborn.pydata.org/tutorial/objects_interface.html">
				<c>seaborn.objects</c>
			</a> and <a href="">
				<c>plotly</c>
			</a> provide alternatives to <c>matplotlib</c> for
			plotting. <ol>
				<li>
					<p>
						<c>seaborn.objects</c> is "a completely new interface for making seaborn
			plots. <idx> <h> <c>seaborn.objects</c> </h> </idx>
			It offers a more consistent and flexible API, comprising a collection of composable
			classes for transforming and plotting data. In contrast to the existing seaborn
			functions, the new interface aims to support end-to-end plot specification and
			customization without dropping down to matplotlib (although it will remain possible to
			do so if necessary)." </p>
				</li>
				<li>
					<p> Unlike <c>seaborn.objects</c>, Plotly is built on top of a 
					<idx> <h> <c>plotly</c> </h> </idx>
			javascript graphics library rather than on top of Matplotlib. Plotly was designed with
			interactive graphics in mind from the start and provides interfaces for a number of
			languages, including python, R, and julia. </p>
				</li>
			</ol>
		</p>

	</subsection>

	<subsection xml:id="subsec-frequently-used-python">
		<title>Frequently used Python commands</title>
		
	<p> If some code that you write isn't working, check whether you are missing one of the
			required import statements. The following will be used frequently. 


			<sage language="python" auto-evaluate="yes">
				<input>
import numpy as np
from scipy import linalg
				</input>
			</sage>
	Less frequently we will use some of the following:	
	<sage language="python" auto-evaluate="yes">
		<input>
import pandas as pd
import sympy    # or import sympy as s
import matplotlib.pyplot as plt
import seaborn.objects as so
		</input>
	</sage>
	
		</p>
		<p> To make things a bit easier in this book, we will often include a 
			code chunks near the top of a section, like the ones above below, to load the packages we require. 
			In an interactive document, these will be auto-evaluated.
			You can tell that a cell has already been evaluated by the green output box below the code and 
			the lack of a button to execute the code.
		</p>
  <p>
    <dl>
      <li><title> Creating matrices </title>
      <p> There are a couple of ways to create matrices.  For
      instance, the matrix
      <me>
	\begin{bmatrix}
	-2 \amp 3 \amp 0 \amp 4 \\
	1 \amp -2 \amp 1 \amp -3 \\
	0 \amp 2 \amp 3 \amp 0 \\
	\end{bmatrix}
      </me>
      can be created in either of the two following ways.
	<ol marker="a.">
	  <li> <p>
	    <sage language="python"> 
		<input>
A = np.array([ 
    [-2, 3, 0, 4],
    [ 1,-2, 1,-3],
	[ 0, 2, 3, 0] 
	])
print(A)
	</input>
	<output> 
[[-2  3  0  4]
 [ 1 -2  1 -3]
 [ 0  2  3  0]]
	</output> 

	    </sage>
	  </p>
	  </li>
	  <li> <p>
	    <sage language="python">
<input>
A = np.array([-2, 3, 0, 4, 1,-2, 1,-3, 0, 2, 3, 0]).reshape(3,4)
print(A)
</input>
<output> 
[[-2  3  0  4]
 [ 1 -2  1 -3]
 [ 0  2  3  0]]
</output> 
	    </sage>
	  </p>
	  </li>
	</ol>
      </p>
      <p>
	Be aware that Python can treat mathematically equivalent
	matrices in different ways depending on how they are entered. 
	For instance, the matrix
	<sage language="python">
		<input>
A = np.array([ [1, 2],
             [2, 1] ])
print(A.dtype)
		</input>
	</sage>
	has integer entries while
	<sage language="python">
	<input>
B = np.array([ [1.0, 2.0],
               [2.0, 1.0] ])
print(B.dtype)
</input>
	</sage>
	has floating point entries. If any of the entries in a matrix are provided as 
	floating point numbers, then all of the entries will be converted to floating point values.
      </p>

      </li>

      <li>
	<title> Special matrices </title>
	<p>
	  The <m>4\by 4</m> identity matrix can be created with the curiously named function 
	  <c>np.eye()</c> (or <c>sympy.eye()</c>).  This has nothing to do with eyes, 
	  but is a play on the pronunciation of <m>\boldsymbol I</m>.
	  Notice that <c>sympy</c> creates a matrix with integer entries, but <c>np</c> produces
	  a matrix with floating point entries.
	  <sage language="python">
	  <input>
print(np.eye(3))
print(sympy.eye(3))
	  </input>
	  <output> 
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
	  </output>
	  </sage>
	  A diagonal matrix can be created from a list of its diagonal entries.  For instance,
	  <sage language="python">
	  <input>
print(np.diag([3, -4, 2]))
	  </input>
	  <output> 
[[ 3  0  0]
 [ 0 -4  0]
 [ 0  0  2]]
	  </output>
	  </sage>
	</p>
      </li>
      <li>
	<title>Reduced row echelon form</title>
	<p>
	  The reduced row echelon form of a matrix can be obtained
	  using the <c>rref()</c> method after converting our matrix to a <c>sympy.Matrix</c>. 
	  For instance,
	  <sage language="python">
	  <input>
A = np.array([ [1,2,3], [2,1,2] ])
rref = sympy.Matrix(A).rref()
print(rref)
	  </input>
	  <output>
(Matrix([
[1, 0, 1/3],
[0, 1, 4/3]]), (0, 1))
	  </output>
	  </sage>
	</p>
      </li>

      <li>
	<title>Vectors</title>
	<p>
	  NumPy arrays do not need to be 2-dimensional. A vector is defined by listing its components.
	  Notice that the shape of <c>v</c> is a 1-tuple.
	  <sage language="python">
	  <input>
v = np.array([3,-1,2])
print(v.shape)
	  </input>
	  <output>
(3,)
	  </output>
	  </sage>
	</p>
      </li>

      <li>
	<title> Addition </title>
	<p> The <c>+</c> operator performs vector and matrix
	addition.
	<sage language="python">
	  <input>
v = np.array([2,1])
w = np.array([-3,2])
print(v+w)
	  </input>
	  <output>
[-1  3]
	  </output>
	</sage>
	<sage language="python">
	  <input>
A = np.array([[2, -3], [1,  2]])
B = np.array([[-4, 1], [3, -1]])
print(A+B)
	  </input>
	  <output>
[[-2 -2]
 [ 4  1]]
	  </output>
	</sage>
	</p>
      </li>

      <li>
	<title> Multiplication </title>
	<p>
	  From a mathematical perspecitve, the <c>*</c> operator performs scalar multiplication of
	  vectors and matrices.
	  <sage language="python">
	  <input>
v = np.array([2,1])
print(3*v)
A = np.array([[2,1],[-3,2]])	    
print(3*A)
	  </input>
	  <output>
[6 3]
[[ 6  3]
 [-9  6]]
 	  </output>
	  </sage>
	  </p>
		
	  <p>
	  Computationally, numpy is using something called <term>broadcasting</term>, which is more 
	  general than scalar multiplication. When two numpy arrays have different shapes, numpy starts
	  from the end of the shape tuples and compares their values.  If they match, that's good.  But it 
	  is also OK if one of them is 1 (or non-existant, which amounts to nearly the samething) and the 
	  other is not.  In this case, we can imagine duplicating the array with 1 in that dimension to fill 
	  out its shape to match the other. (NumPy does not actually do this duplication, since that would be 
	  ineffcient, but it is a good mental model for how the operation behaves.) Working from back to 
	  front, each axis is considered, and in the end, if the shapes are compatible, they can be treated 
	  as if they had the same shape.  At that point, the opreation proceeds element by element in the 
	  expanded arrays.
	  </p>

	  <p>
		You can find out much more about broadcasting at 
		<url href="https://numpy.org/doc/stable/user/basics.broadcasting.html"
		visual = "numpy.org/doc/stable/user/basics.broadcasting.html" />.
	  </p>
	  
	<p>
	  Broadcasting means that <c>*</c> cannot be used for for matrix-vector and
	  matrix-matrix multiplication in the linear algebra sense.  Instead we use <c>@</c>.
	  <sage language="python">
	  <input>
A = np.array([[2,-3],[1,2]])
v = np.array([2,1])	    
print(A*v)  # component-wise, after broadcasting
print(A@v)  # CORRECT way to do linear algebra
B = np.array([[-4,1],[3,-1]])
print(A*B)   # component-wise
print(A@B)   # linear algebra
	  </input>
	  </sage>
	</p>
      </li>

      <li>
	<title> Operations on vectors </title>
	<p>
	  <ol marker="a.">
	    <li>
	      <p>
		The length of a vector <c>v</c> is found using
		<c>scipy.linalg.norm()</c>.  

		<sage language="python">
		<input>
v = np.array([3, 4])
print(linalg.norm(v))
		</input>
		</sage>
	      </p>

		  <p>
			Actually, <c>np.linalg.norm()</c> can compute many different norms of 
		    both vectors and matrices.	
		  </p>
	    </li>
	    <li>
			<idx><h>dot product</h></idx>
	      <p>
		The dot product of two vectors <c>v</c> and <c>w</c> is also computed
		using <c>@</c>
		<sage language="python">
		  <input>
v @ v  # should match linalg.norv(v)
		  </input>
		</sage>
	      </p>
	    </li>
	  </ol>
	</p>
      </li>

      <li>
	<title> Operations on matrices </title>
	<p><ol marker="a.">
	  <li>
	    <p> The transpose of a matrix <c>A</c> is obtained using <c>np.transpose()</c>
			<sage language="python">
				<input>
A = np.array(np.arange(6)).reshape(2,3)
At = np.transpose(A)
print(A, "\n------\n", At)
				</input>
				<output>
[[0 1 2]
 [3 4 5]] 
------
 [[0 3]
 [1 4]
 [2 5]]
				</output>
			</sage>
			

	    </p>
	  </li>
	  <li>
	    <p> The inverse of a matrix <c>A</c> is obtained using either
	    <c>linalg.inv(A)</c>. But for serious computational work, there is almost 
		always something better than explicitly computing an inverse this way.
	    </p>
	  </li>
	  <li>
	    <p> The determinant of <c>A</c> is <c>linalg.det(A)</c>.
	    </p>
	  </li>
	  <li>
	    <p> An orthonormal basis for the null space <m>\nul(A)</m> is found with
	    <c>linalg.nullspace(A)</c>. </p>
	  </li>
	</ol>
	</p>
      </li>

      <li>
	<title> Eigenvectors and eigenvalues </title>
	<p>
	  <ol marker="a.">
	    <li>
	      <p>
		The eigenvalues of a matrix <c>A</c> can be found with
		<c>linalg.eigvals(A)</c>.
		The number of times that an eigenvalue appears in the list
		equals its multiplicity.
	      </p>
	    </li>
	    <li>
	      <p>
		The eigenvectors of a matrix <c>A</c> can be found with
		<c>linalg.eig(A)</c>.
	      </p>
	    </li>


	    <li>
	      <p>
		If <m>A</m> can be diagonalized as <m>A=PDP^{-1}</m>, then
		<sage language="python">
A = np.array(np.arange(9)).reshape(3,3)
D, P = sympy.Matrix(A).diagonalize()
sympy.pprint(D)
sympy.pprint(P)
sympy.pprint(P.evalf(3))
		</sage>
		provides the matrices <c>D</c> and <c>P</c>. Recall the <c>sympy</c> does  
		symbolic computation.  We can use <c>evalf()</c> to compute a numerical approximation.

	      </p>
	    </li>
	    <li>
	      <p>
		The characteristic polynomial of <c>sympy.Matrix</c> <c>A</c> is
		<c>A.charpoly('x')</c>.
		<sage language="python">
			<input>
A = np.array(np.arange(9)).reshape(3,3)
poly = sympy.Matrix(A).charpoly('x')
sympy.pprint(poly)
print(poly(2))
			</input>
			<output>
PurePoly(x**3 - 12*x**2 - 18*x, x, domain='ZZ')
-76
			</output>
		</sage>
		
	      </p>
	    </li>
	  </ol>
	</p>
      </li>
      <li>
	<title> Matrix factorizations </title>
	<p>
	  <ol marker="a.">
	    <li>
	      <p>
		The <m>LU</m> factorization of a matrix 
		<sage language="python">
		<input> 
A = np.array(np.arange(9)).reshape(3,3)
P, L, U = linalg.lu(A)
		</input> 
		</sage>
		gives matrices so that <m>A = PLU</m>, where <m>P</m> is a permutation matrix, 
		<m>L</m> is lower diagonal, and <m>U</m> is upper diagonal.
	      </p>
	    </li>
	    <li>
	      <p>
		A singular value decomposition is obtained with
		<sage language="python">
		<input> 
A = np.array(np.arange(12)).reshape(3,4)
U, s, V = linalg.svd(A)
print([x.shape for x in [U, s, V]])
		</input> 
		<output>
[(3, 3), (3,), (4, 4)]
		</output>
		</sage>
		Note that <c>s</c> is not a matric but a 1-d array of singular values. If the matrix is needed,
		we can construct it with
		<sage language="python">
			<input>
Sigma = linalg.diagsvd(s, 3, 4)  # must specify the shape 
print(s.round(3)) 
print(Sigma.round(3))
			</input>
			<output>
[22.409  1.955  0.   ]
[[22.409  0.     0.     0.   ]
 [ 0.     1.955  0.     0.   ]
 [ 0.     0.     0.     0.   ]]
			</output>
		</sage>
		
	      </p>
	    </li>
	    <li>
	      <p>
		The <m>QR</m> factorization of <c>A</c> is
		<c>linalg.qr(A)</c> provided that <c>A</c>. 
		<sage language="python">
			<input>
Q, R = linalg.qr(A)
print(Q.round(2))
print(R.round(2))
			</input>
			<output>
[[ 0.    0.91  0.41]
 [-0.45  0.37 -0.82]
 [-0.89 -0.18  0.41]]
[[ -8.94 -10.29 -11.63 -12.97]
 [  0.     1.1    2.19   3.29]
 [  0.     0.     0.    -0.  ]]
			</output>
		</sage>
		
	      </p>
	    </li>
	  </ol>
	</p>
      </li>
    </dl>
  </p>
      
	</subsection>

</appendix>

  
