// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Animation, Controller, FadeAnimation, MathboxAnimation, NullAnimation, SimultAnimations, Slide, SlideChain, Slideshow, State, TimedAnimation, addEvents,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  addEvents = function(cls) {
    cls.prototype.on = function(types, callback) {
      var base, j, len, type;
      if (!(types instanceof Array)) {
        types = [types];
      }
      if (this._listeners == null) {
        this._listeners = {};
      }
      for (j = 0, len = types.length; j < len; j++) {
        type = types[j];
        if ((base = this._listeners)[type] == null) {
          base[type] = [];
        }
        this._listeners[type].push(callback);
      }
      return this;
    };
    cls.prototype.off = function(types, callback) {
      var idx, j, len, ref, ref1, type;
      if (!(types instanceof Array)) {
        types = [types];
      }
      for (j = 0, len = types.length; j < len; j++) {
        type = types[j];
        idx = (ref = this._listeners) != null ? (ref1 = ref[type]) != null ? ref1.indexOf(callback) : void 0 : void 0;
        if ((idx != null) && idx >= 0) {
          this._listeners[type].splice(idx, 1);
        }
      }
      return this;
    };
    return cls.prototype.trigger = function(event) {
      var callback, j, len, listeners, ref, ref1, type;
      type = event.type;
      event.target = this;
      listeners = (ref = this._listeners) != null ? (ref1 = ref[type]) != null ? ref1.slice() : void 0 : void 0;
      if (listeners == null) {
        return;
      }
      for (j = 0, len = listeners.length; j < len; j++) {
        callback = listeners[j];
        callback.call(this, event, this);
        if (callback.triggerOnce) {
          this.off(type, callback);
        }
      }
      return this;
    };
  };

  State = (function() {
    function State(controller1) {
      this.controller = controller1;
      this.keys = [];
      this._copyVal = {};
      this._installVal = {};
    }

    State.prototype.addVal = function(opts) {
      var copy, install, key, ref, ref1, ref2, val;
      key = opts.key;
      val = (ref = opts.val) != null ? ref : void 0;
      copy = (ref1 = opts.copy) != null ? ref1 : function(val) {
        return val;
      };
      install = (ref2 = opts.install) != null ? ref2 : function(controller, val) {};
      this.keys.push(key);
      this[key] = val;
      this._copyVal[key] = copy;
      return this._installVal[key] = install;
    };

    State.prototype.copy = function() {
      var j, k, len, ref, ret;
      ret = new State(this.controller);
      ref = this.keys;
      for (j = 0, len = ref.length; j < len; j++) {
        k = ref[j];
        ret.addVal({
          key: k,
          val: this._copyVal[k](this[k]),
          copy: this._copyVal[k],
          install: this._installVal[k]
        });
      }
      return ret;
    };

    State.prototype.copyVal = function(key) {
      return this._copyVal[key](this[key]);
    };

    State.prototype.installVal = function(key) {
      return this._installVal[key](this.controller, this[key]);
    };

    State.prototype.install = function() {
      var j, k, len, ref, results;
      ref = this.keys;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        k = ref[j];
        results.push(this.installVal(k));
      }
      return results;
    };

    return State;

  })();

  Controller = (function() {
    function Controller(name, state1, mathbox) {
      this.name = name;
      this.state = state1;
      this.mathbox = mathbox;
      this.frame = bind(this.frame, this);
      this.anims = [];
      this.loaded = false;
      this.mathbox.three.on('pre', this.frame);
      this.mathbox.three.on('post', this.frame);
      this.clock = this.mathbox.select('root')[0].clock;
    }

    Controller.prototype.jumpState = function(nextState) {
      var anim, j, len, ref;
      ref = this.anims;
      for (j = 0, len = ref.length; j < len; j++) {
        anim = ref[j];
        anim.stop();
      }
      this.anims = [];
      this.state = nextState.copy();
      return this.state.install();
    };

    Controller.prototype.frame = function(event) {
      var callback, callbacks, f, frames, ref, ref1, results;
      if (((ref = this.nextFrame) != null ? ref[event.type] : void 0) == null) {
        return;
      }
      frames = this.mathbox.three.Time.frames;
      ref1 = this.nextFrame[event.type];
      results = [];
      for (f in ref1) {
        callbacks = ref1[f];
        if (f < frames) {
          delete this.nextFrame[event.type][f];
          results.push((function() {
            var j, len, results1;
            results1 = [];
            for (j = 0, len = callbacks.length; j < len; j++) {
              callback = callbacks[j];
              results1.push(callback());
            }
            return results1;
          })());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Controller.prototype.onNextFrame = function(after, callback, stage) {
      var base, base1, time;
      if (stage == null) {
        stage = 'post';
      }
      if (this.nextFrame == null) {
        this.nextFrame = {};
      }
      if ((base = this.nextFrame)[stage] == null) {
        base[stage] = {};
      }
      time = this.mathbox.three.Time.frames + (after - 1);
      if ((base1 = this.nextFrame[stage])[time] == null) {
        base1[time] = [];
      }
      return this.nextFrame[stage][time].push(callback);
    };

    return Controller;

  })();

  addEvents(Controller);

  Animation = (function() {
    function Animation() {
      this.running = false;
    }

    Animation.prototype.start = function() {
      this.running = true;
      return this;
    };

    Animation.prototype.stop = function() {
      if (!this.running) {
        return;
      }
      this.running = false;
      this.trigger({
        type: 'stopped'
      });
      return this;
    };

    Animation.prototype.done = function() {
      this.running = false;
      this.trigger({
        type: 'done'
      });
      return this;
    };

    return Animation;

  })();

  addEvents(Animation);

  NullAnimation = (function(superClass) {
    extend(NullAnimation, superClass);

    function NullAnimation() {
      return NullAnimation.__super__.constructor.apply(this, arguments);
    }

    NullAnimation.prototype.start = function() {
      NullAnimation.__super__.start.apply(this, arguments);
      return this.done();
    };

    return NullAnimation;

  })(Animation);

  SimultAnimations = (function(superClass) {
    extend(SimultAnimations, superClass);

    function SimultAnimations(children) {
      var child, j, len, ref;
      this.children = children;
      ref = this.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        child.on('done', (function(_this) {
          return function() {
            return _this.done();
          };
        })(this));
      }
      SimultAnimations.__super__.constructor.apply(this, arguments);
    }

    SimultAnimations.prototype.start = function() {
      var child, j, len, ref;
      ref = this.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        child.start();
      }
      return SimultAnimations.__super__.start.apply(this, arguments);
    };

    SimultAnimations.prototype.stop = function() {
      var child, j, len, ref;
      ref = this.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        child.stop();
      }
      return SimultAnimations.__super__.stop.apply(this, arguments);
    };

    SimultAnimations.prototype.done = function() {
      var child, j, len, ref;
      ref = this.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (child.running) {
          return;
        }
      }
      return SimultAnimations.__super__.done.apply(this, arguments);
    };

    return SimultAnimations;

  })(Animation);

  TimedAnimation = (function(superClass) {
    extend(TimedAnimation, superClass);

    function TimedAnimation(clock, animate) {
      this.clock = clock;
      this.animate = animate;
      TimedAnimation.__super__.constructor.apply(this, arguments);
    }

    TimedAnimation.prototype.start = function() {
      var startTime;
      startTime = this.clock.getTime().clock;
      this.callback = (function(_this) {
        return function() {
          var elapsed;
          elapsed = _this.clock.getTime().clock - startTime;
          return _this.animate(elapsed);
        };
      })(this);
      this.clock.on('clock.tick', this.callback);
      return TimedAnimation.__super__.start.apply(this, arguments);
    };

    TimedAnimation.prototype.stop = function() {
      this.clock.off('clock.tick', this.callback);
      return TimedAnimation.__super__.stop.apply(this, arguments);
    };

    TimedAnimation.prototype.done = function() {
      this.clock.off('clock.tick', this.callback);
      return TimedAnimation.__super__.done.apply(this, arguments);
    };

    return TimedAnimation;

  })(Animation);

  MathboxAnimation = (function(superClass) {
    extend(MathboxAnimation, superClass);

    function MathboxAnimation(element, opts1) {
      var base, k;
      this.opts = opts1;
      this.opts.target = element;
      if ((base = this.opts).to == null) {
        base.to = Math.max.apply(null, (function() {
          var results;
          results = [];
          for (k in this.opts.script) {
            results.push(k);
          }
          return results;
        }).call(this));
      }
      MathboxAnimation.__super__.constructor.apply(this, arguments);
    }

    MathboxAnimation.prototype.start = function() {
      this._play = this.opts.target.play(this.opts);
      this._play.on('play.done', (function(_this) {
        return function() {
          _this._play.remove();
          delete _this._play;
          return _this.done();
        };
      })(this));
      return MathboxAnimation.__super__.start.apply(this, arguments);
    };

    MathboxAnimation.prototype.stop = function() {
      var ref;
      if ((ref = this._play) != null) {
        ref.remove();
      }
      delete this._play;
      return MathboxAnimation.__super__.stop.apply(this, arguments);
    };

    return MathboxAnimation;

  })(Animation);

  FadeAnimation = (function(superClass) {
    extend(FadeAnimation, superClass);

    function FadeAnimation(element, script) {
      var k, opts, script2, v;
      script2 = {};
      for (k in script) {
        v = script[k];
        script2[k] = {
          props: {
            opacity: v
          }
        };
      }
      opts = {
        script: script2
      };
      opts.ease = 'linear';
      FadeAnimation.__super__.constructor.call(this, element, opts);
    }

    return FadeAnimation;

  })(MathboxAnimation);

  Slide = (function(superClass) {
    extend(Slide, superClass);

    function Slide() {
      this.anims = [];
      this.data = {};
      Slide.__super__.constructor.apply(this, arguments);
    }

    Slide.prototype.stopAll = function() {
      var anim, j, len, ref;
      ref = this.anims;
      for (j = 0, len = ref.length; j < len; j++) {
        anim = ref[j];
        anim.stop();
      }
      return this.anims = [];
    };

    Slide.prototype.stop = function() {
      this.stopAll();
      return Slide.__super__.stop.apply(this, arguments);
    };

    Slide.prototype.done = function() {
      this.stopAll();
      return Slide.__super__.done.apply(this, arguments);
    };

    Slide.prototype.transform = function(oldState) {
      return oldState.copy();
    };

    Slide.prototype.fastForward = function() {};

    return Slide;

  })(Animation);

  SlideChain = (function(superClass) {
    extend(SlideChain, superClass);

    function SlideChain(slides) {
      var callback, j, k, l, len, len1, ref, ref1, ref2, slide, v;
      this.slides = slides;
      this.fastForward = bind(this.fastForward, this);
      this.stop = bind(this.stop, this);
      this.start = bind(this.start, this);
      this.playSlide = bind(this.playSlide, this);
      SlideChain.__super__.constructor.apply(this, arguments);
      this.slideNum = -1;
      callback = (function(_this) {
        return function() {
          if (_this.slideNum + 1 < _this.slides.length) {
            return _this.playSlide(_this.slideNum + 1);
          } else {
            _this.slideNum = -1;
            return _this.done();
          }
        };
      })(this);
      ref = this.slides;
      for (j = 0, len = ref.length; j < len; j++) {
        slide = ref[j];
        slide.on('done', callback);
      }
      ref1 = this.slides;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        slide = ref1[l];
        ref2 = slide.data;
        for (k in ref2) {
          v = ref2[k];
          this.data[k] = v;
        }
      }
    }

    SlideChain.prototype.transform = function(oldState) {
      var j, len, ref, slide;
      ref = this.slides;
      for (j = 0, len = ref.length; j < len; j++) {
        slide = ref[j];
        oldState = slide.transform(oldState);
      }
      return oldState;
    };

    SlideChain.prototype.playSlide = function(slideNum) {
      var slide;
      this.slideNum = slideNum;
      slide = this.slides[this.slideNum];
      return slide.start();
    };

    SlideChain.prototype.start = function() {
      SlideChain.__super__.start.apply(this, arguments);
      this.playSlide(0);
      return this;
    };

    SlideChain.prototype.stop = function() {
      var slide;
      if (!(this.slideNum >= 0)) {
        return;
      }
      slide = this.slides[this.slideNum];
      slide.stop();
      this.slideNum = -1;
      return SlideChain.__super__.stop.apply(this, arguments);
    };

    SlideChain.prototype.fastForward = function() {
      var i, j, nextState, ref, ref1, slide;
      if (!(this.slideNum >= 0)) {
        return;
      }
      slide = this.slides[this.slideNum];
      nextState = slide.fastForward();
      for (i = j = ref = this.slideNum + 1, ref1 = this.slides.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        nextState = this.slides[i].transform(nextState);
      }
      return nextState;
    };

    return SlideChain;

  })(Slide);

  Slideshow = (function() {
    var CaptionSlide;

    function Slideshow(controller1) {
      var cls, ref;
      this.controller = controller1;
      this.goToSlide = bind(this.goToSlide, this);
      this.updateUI = bind(this.updateUI, this);
      this.slides = [];
      this.states = [this.controller.state.copy()];
      this.currentSlideNum = 0;
      this.playing = false;
      this.combining = [];
      cls = ".slideshow." + this.controller.name;
      this.prevButton = document.querySelector(cls + " .prev-button");
      this.reloadButton = document.querySelector(cls + " .reload-button");
      this.nextButton = document.querySelector(cls + " .next-button");
      this.pageCounter = document.querySelector(cls + " .pages");
      this.captionDiv = document.querySelector(cls + " .caption");
      this.states[0].caption = this.controller.state.caption = (ref = this.captionDiv) != null ? ref.innerHTML : void 0;
      this.prevButton.onclick = (function(_this) {
        return function() {
          return _this.prevSlide();
        };
      })(this);
      this.nextButton.onclick = (function(_this) {
        return function() {
          return _this.nextSlide();
        };
      })(this);
      this.reloadButton.onclick = (function(_this) {
        return function() {
          return _this.reloadSlide();
        };
      })(this);
      this.updateUI();
    }

    Slideshow.prototype.prevSlide = function() {
      if (this.currentSlideNum === 0 && !this.playing) {
        return;
      }
      if (!this.controller.loaded) {
        return;
      }
      if (this.playing) {
        return this.goToSlide(this.currentSlideNum);
      } else {
        return this.goToSlide(this.currentSlideNum - 1);
      }
    };

    Slideshow.prototype.nextSlide = function() {
      if (this.currentSlideNum === this.slides.length) {
        return;
      }
      if (!this.controller.loaded) {
        return;
      }
      if (this.playing) {
        return this.goToSlide(this.currentSlideNum + 1);
      } else {
        if (this.currentSlideNum === 0) {
          this.states[0] = this.controller.state.copy();
        }
        return this.play();
      }
    };

    Slideshow.prototype.reloadSlide = function() {
      if (this.currentSlideNum === 0 && !this.playing) {
        return;
      }
      if (!this.controller.loaded) {
        return;
      }
      if (this.playing) {
        this.goToSlide(this.currentSlideNum);
      } else {
        this.goToSlide(this.currentSlideNum - 1);
      }
      return this.play();
    };

    Slideshow.prototype.updateCaption = function(text) {
      var ref;
      return (ref = this.captionDiv) != null ? ref.innerHTML = text : void 0;
    };

    Slideshow.prototype.updateUI = function(oldSlideNum) {
      var ref;
      if (oldSlideNum == null) {
        oldSlideNum = -1;
      }
      if (this.currentSlideNum === 0 && !this.playing) {
        this.prevButton.classList.add('inactive');
        this.reloadButton.classList.add('inactive');
      } else {
        this.prevButton.classList.remove('inactive');
        this.reloadButton.classList.remove('inactive');
      }
      if (this.currentSlideNum === this.slides.length) {
        this.nextButton.classList.add('inactive');
      } else {
        this.nextButton.classList.remove('inactive');
      }
      return (ref = this.pageCounter) != null ? ref.innerHTML = (this.currentSlideNum + 1) + " / " + (this.slides.length + 1) : void 0;
    };

    Slideshow.prototype.play = function() {
      if (this.currentSlideNum >= this.slides.length) {
        return;
      }
      this.playing = true;
      this.slides[this.currentSlideNum].start();
      return this.updateUI();
    };

    Slideshow.prototype.getState = function(slideNum) {
      var i, j, ref, state;
      state = this.states[0];
      for (i = j = 0, ref = slideNum; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        state = this.slides[i].transform(state);
      }
      return state;
    };

    Slideshow.prototype.goToSlide = function(slideNum) {
      var i, j, oldSlideNum, ref, ref1, start;
      if (slideNum < 0 || slideNum > this.slides.length) {
        return;
      }
      oldSlideNum = this.currentSlideNum;
      this.currentSlideNum = slideNum;
      if (this.currentSlideNum > oldSlideNum) {
        if (this.playing) {
          this.states[oldSlideNum + 1] = this.slides[oldSlideNum].fastForward();
          start = oldSlideNum + 1;
        } else {
          start = oldSlideNum;
        }
        this.slides[oldSlideNum].stop();
        for (i = j = ref = start, ref1 = this.currentSlideNum; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
          this.states[i + 1] = this.slides[i].transform(this.states[i]);
        }
      } else if (this.playing) {
        this.slides[oldSlideNum].stop();
      }
      this.controller.jumpState(this.states[this.currentSlideNum]);
      this.updateCaption(this.states[this.currentSlideNum].caption);
      this.playing = false;
      this.updateUI(oldSlideNum);
      if (oldSlideNum !== this.currentSlideNum) {
        return this.trigger({
          type: 'slide.new',
          stateNum: this.currentSlideNum
        });
      }
    };

    Slideshow.prototype.addSlide = function(slide) {
      this.combining.push(slide);
      return this;
    };

    Slideshow.prototype.removeSlide = function(index) {
      var newSlide, slide;
      slide = this.slides.splice(index, 1)[0];
      this.states.splice(index + 1, 1);
      if (this.currentSlideNum === index + 1) {
        newSlide = index < this.slides.length ? index + 1 : index;
        return this.goToSlide(newSlide);
      } else if (this.currentSlideNum > index) {
        this.currentSlideNum--;
        return this.updateUI();
      }
    };

    Slideshow.prototype["break"] = function() {
      var combining, slide;
      combining = this.combining;
      this.combining = [];
      slide = new SlideChain(combining);
      this.slides.push(slide);
      slide.on('done', (function(_this) {
        return function() {
          _this.playing = false;
          _this.currentSlideNum += 1;
          _this.states[_this.currentSlideNum] = _this.controller.state.copy();
          _this.updateUI(_this.currentSlideNum - 1);
          _this.updateCaption(_this.controller.state.caption);
          return _this.trigger({
            type: 'slide.new',
            stateNum: _this.currentSlideNum
          });
        };
      })(this));
      this.updateUI();
      return this;
    };

    CaptionSlide = (function(superClass) {
      extend(CaptionSlide, superClass);

      function CaptionSlide(sshow, caption) {
        this.sshow = sshow;
        this.caption = caption;
        CaptionSlide.__super__.constructor.apply(this, arguments);
      }

      CaptionSlide.prototype.start = function() {
        this._nextState = this.transform(this.sshow.controller.state);
        this.sshow.updateCaption(this.caption);
        this.sshow.controller.state = this._nextState;
        CaptionSlide.__super__.start.apply(this, arguments);
        return this.done();
      };

      CaptionSlide.prototype.transform = function(oldState) {
        var nextState;
        nextState = oldState.copy();
        nextState.caption = this.caption;
        return nextState;
      };

      CaptionSlide.prototype.fastForward = function() {
        return this._nextState.copy();
      };

      return CaptionSlide;

    })(Slide);

    Slideshow.prototype.caption = function(text) {
      var slide;
      slide = new CaptionSlide(this, text);
      slide.data.type = "caption";
      return this.addSlide(slide);
    };

    return Slideshow;

  })();

  addEvents(Slideshow);

  window.State = State;

  window.Controller = Controller;

  window.Animation = Animation;

  window.NullAnimation = NullAnimation;

  window.SimultAnimations = SimultAnimations;

  window.TimedAnimation = TimedAnimation;

  window.MathboxAnimation = MathboxAnimation;

  window.FadeAnimation = FadeAnimation;

  window.Slide = Slide;

  window.SlideChain = SlideChain;

  window.Slideshow = Slideshow;

}).call(this);
